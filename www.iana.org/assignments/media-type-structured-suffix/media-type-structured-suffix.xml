<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet type="text/xsl" href="media-type-structured-suffix.xsl"?>
<?oxygen RNGSchema="media-type-structured-suffix.rng" type="xml"?>
<registry xmlns="http://www.iana.org/assignments" id="media-type-structured-suffix">
  <title>Structured Syntax Suffix Registry</title>
  <category>Multipurpose Internet Mail Extensions (MIME) and Media Types</category>
  <created>2012-07-20</created>
  <updated>2014-07-08</updated>

  <registry id="structured-syntax-suffix">
    <title>Structured Syntax Suffix Registry</title>
    <registration_rule>Expert Review</registration_rule>
    <expert>Ned Freed</expert>
    <xref type="rfc" data="rfc6838"/>
    
    <record date="2012-11-15">
      <name>Extensible Markup Language (XML)</name>
      <suffix>+xml</suffix>
      <xref type="rfc" data="rfc7303"/>
      <encoding>Same as <xref type="rfc" data="rfc7303"/>, Section 9.1.</encoding>
      <interop>Same as <xref type="rfc" data="rfc7303"/>, Section 9.1. 
      See above, and also Section 3, for guidelines on the use of the 'charset' parameter.</interop>
      <fragment>
      <paragraph>
      Registrations which use this
      '+xml' convention MUST also make reference to <xref type="rfc" data="rfc7303"/>,
      specifically Section 5, in specifying fragment identifier syntax
      and semantics, and they MAY restrict the syntax to a specified
      subset of schemes, except that they MUST NOT disallow barenames or
      'element' scheme pointers.  They MAY further require support for
      other registered schemes.  They also MAY add additional syntax
      (which MUST NOT overlap with <xref type="uri" data="http://www.w3.org/TR/2003/REC-xptr-framework-20030325/">XPointerFramework</xref> syntax) together
      with associated semantics, and MAY add additional semantics for
      barename XPointers which, as provided for in Section 5, will only
      apply when <xref type="rfc" data="rfc7303"/> does not define an interpretation.
      </paragraph>
      <paragraph>
      In practice these constraints imply that for a fragment
      identifier addressed to an instance of a specific "xxx/yyy+xml"
      type, there are three cases:
      </paragraph>
      <paragraph>
      For fragment identifiers matching the syntax defined in
      <xref type="uri" data="http://www.w3.org/TR/2003/REC-xptr-framework-20030325/">XPointerFramework</xref>, where the fragment identifier resolves
      per the rules specified there, then process as specified
      there;
      </paragraph>
      <paragraph>
      For fragment identifiers matching the syntax defined in
      <xref type="uri" data="http://www.w3.org/TR/2003/REC-xptr-framework-20030325/">XPointerFramework</xref>, where the fragment identifier does
      _not_ resolve per the rules specified there, then process as
      specified in "xxx/yyy+xml";
      </paragraph>
      <paragraph>
      For fragment identifiers _not_ matching the syntax defined
      in <xref type="uri" data="http://www.w3.org/TR/2003/REC-xptr-framework-20030325/">XPointerFramework</xref>, then process as specified in "xxx/
      yyy+xml".  A fragment identifier of the form
      "xywh=160,120,320,240", as defined in <xref type="uri" data="http://www.w3.org/TR/2012/REC-media-frags-20120925/">MediaFrags</xref>, which
      might be used in a URI for an XML-encoded image, would fall
      in this category.
      </paragraph>
      </fragment>
      <security>See Section 10, <xref type="rfc" data="rfc7303"/>.</security>
      <contact>See Authors' Addresses section, <xref type="rfc" data="rfc7303"/>.</contact>
      <controller>The XML specification is a work product of the World Wide Web 
      Consortium's XML Core Working Group. The W3C has change control over 
      <xref type="rfc" data="rfc7303"/>.</controller>
      <mod-dates>2014-04-17</mod-dates>
    </record>
    
    <record date="2012-11-27">
      <name>JavaScript Object Notation (JSON)</name>
      <suffix>+json</suffix>
      <xref type="rfc" data="rfc4627"/><xref type="rfc" data="rfc6839"/>
      <encoding>Per <xref type="rfc" data="rfc4627"/>, JSON is allowed to be
        represented using UTF-8, UTF-16, or UTF-32.  When
        JSON is written in UTF-8, JSON is 8bit compatible (<xref type="rfc" data="rfc2045"/>).  When JSON is written in UTF-16 or
        UTF-32, JSON is binary (<xref type="rfc" data="rfc2045"/>).</encoding>
      <interop>n/a</interop>
      <fragment>The syntax and semantics of fragment
        identifiers specified for +json SHOULD be as
        specified for "application/json".  (At
        publication of this document, there is no
        fragment identification syntax defined for
        "application/json".)
        
        The syntax and semantics for fragment
        identifiers for a specific "xxx/yyy+json"
        SHOULD be processed as follows:
        
        For cases defined in +json, where the
        fragment identifier resolves per the +json
        rules, then as specified in +json.
        
        For cases defined in +json, where the
        fragment identifier does not resolve per
        the +json rules, then as specified in "xxx/
        yyy+json".
        
        For cases not defined in +json, then as
        specified in "xxx/yyy+json".</fragment>
      <security>See <xref type="rfc" data="rfc4627"/>.</security>
      <contact>Apps Area Working Group (apps-discuss@ietf.org)</contact>
      <controller>The Apps Area Working Group.  IESG has
        change control over this registration.</controller>
      <mod-dates/>
    </record>
    
    <record date="2012-11-27">
      <name>Basic Encoding Rules (BER) message transfer syntax</name>
      <suffix>+ber</suffix>
      <xref type="text">ITU.X690.2008</xref><xref type="rfc" data="rfc6839"/>
      <encoding>BER is a binary encoding.</encoding>
      <interop>n/a</interop>
      <fragment>At publication of this document, there is no
        fragment identification syntax defined for
        +ber.
        
        The syntax and semantics for fragment
        identifiers for a specific "xxx/yyy+ber"
        SHOULD be processed as follows:
        
        For cases defined in +ber, where the
        fragment identifier resolves per the +ber
        rules, then as specified in +ber.
      
      For cases defined in +ber, where the
      fragment identifier does not resolve per
      the +ber rules, then as specified in "xxx/
      yyy+ber".
      
      For cases not defined in +ber, then as
      specified in "xxx/yyy+ber".
      </fragment>
      <security>Each individual media type registered with
        a +ber suffix can have additional security
        considerations.
        
        BER has a type-length-value structure, and it is
        easy to construct malicious content with invalid
        length fields that can cause buffer overrun
        conditions.
        
        BER allows for arbitrary levels of nesting, which
        may make it possible to construct malicious
        content that will cause a stack overflow.
        
        Interpreters of the BER structures should be
        aware of these issues and should take appropriate
        measures to guard against buffer overflows and
        stack overruns in particular and malicious
        content in general.</security>
      <contact>Apps Area Working Group (apps-discuss@ietf.org)</contact>
      <controller>The Apps Area Working Group.  IESG has
        change control over this registration.</controller>
      <mod-dates/>
    </record>

    <record date="2013-09-19">
      <name>Concise Binary Object Representation (CBOR)</name>
      <suffix>+cbor</suffix>
      <xref type="rfc" data="rfc7049"/>
      <encoding>CBOR is a binary format.</encoding>
      <interop>n/a</interop>
      <fragment>The syntax and semantics of fragment identifiers specified for
     +cbor SHOULD be as specified for "application/cbor".  (At
     publication of this document, there is no fragment identification
     syntax defined for "application/cbor".)

     The syntax and semantics for fragment identifiers for a specific
     "xxx/yyy+cbor" SHOULD be processed as follows:

     For cases defined in +cbor, where the fragment identifier resolves
     per the +cbor rules, then process as specified in +cbor.

     For cases defined in +cbor, where the fragment identifier does
     not resolve per the +cbor rules, then process as specified in
     "xxx/yyy+cbor".

     For cases not defined in +cbor, then process as specified in
     "xxx/yyy+cbor".
      </fragment>
      <security>See Section 8 of <xref type="rfc" data="rfc7049"/>
      </security>
      <contact>Apps Area Working Group (apps-discuss at ietf.org)</contact>
      <controller>The Apps Area Working Group.  IESG has
        change control over this registration.</controller>
      <mod-dates/>
    </record>

    <record date="2012-11-27">
      <name>Distinguished Encoding Rules (DER) message transfer syntax</name>
      <suffix>+der</suffix>
      <xref type="text">ITU.X690.2008</xref><xref type="rfc" data="rfc6839"/>
      <encoding>DER is a binary encoding.</encoding>
      <interop>n/a</interop>
      <fragment>At publication of this document, there is no
        fragment identification syntax defined for
        +der.
        
        The syntax and semantics for fragment
        identifiers for a specific "xxx/yyy+der"
        SHOULD be processed as follows:
        
        For cases defined in +der, where the
        fragment identifier resolves per the +der
        rules, then as specified in +der.
        
        For cases defined in +der, where the
        fragment identifier does not resolve per
        the +der rules, then as specified in "xxx/
        yyy+der".
        
        For cases not defined in +der, then as
        specified in "xxx/yyy+der".
      </fragment>
      <security>Each individual media type registered with
        a +der suffix can have additional security
        considerations.
        
        DER has a type-length-value structure, and it is
        easy to construct malicious content with invalid
        length fields that can cause buffer overrun
        conditions.
        
        DER allows for arbitrary levels of nesting, which
        may make it possible to construct malicious
        content that will cause a stack overflow.
      
      Interpreters of the DER structures should be
      aware of these issues and should take appropriate
      measures to guard against buffer overflows and
      stack overruns in particular and malicious
      content in general.
      </security>
      <contact>Apps Area Working Group (apps-discuss@ietf.org)</contact>
      <controller>The Apps Area Working Group.  IESG has
        change control over this registration.</controller>
      <mod-dates/>
    </record>
    
    <record date="2012-11-27">
      <name>Fast Infoset document format</name>
      <suffix>+fastinfoset</suffix>
      <xref type="text">ITU.X891.2005</xref><xref type="rfc" data="rfc6839"/>
      <encoding>Fast Infoset is a binary encoding.  The
        binary, quoted-printable and base64 content-
        transfer-encodings are suitable for use with Fast
        Infoset.</encoding>
      <interop>n/a</interop>
      <fragment>The syntax and semantics of fragment
        identifiers specified for +fastinfoset SHOULD
        be as specified for "application/fastinfoset".
        (At publication of this document, there is no
        fragment identification syntax defined for
        "application/fastinfoset".)
        
        The syntax and semantics for fragment
        identifiers for a specific "xxx/
        yyy+fastinfoset" SHOULD be processed as
        follows:
        
        For cases defined in +fastinfoset, where
        the fragment identifier resolves per the
        +fastinfoset rules, then as specified in
        +fastinfoset.
        
        For cases defined in +fastinfoset, where
        the fragment identifier does not resolve
        per the +fastinfoset rules, then as
        specified in "xxx/yyy+fastinfoset".
        
        For cases not defined in +fastinfoset, then
        as specified in "xxx/yyy+fastinfoset".
      </fragment>
      <security>There are no security considerations
        inherent in Fast Infoset.  Each individual media
        type registered with a +fastinfoset suffix can
        have additional security considerations.
      </security>
      <contact>Apps Area Working Group (apps-discuss@ietf.org)</contact>
      <controller>The Apps Area Working Group.  IESG has
        change control over this registration.</controller>
      <mod-dates/>
    </record>
    
    <record date="2012-11-27">
      <name>WAP Binary XML (WBXML) document format</name>
      <suffix>+wbxml</suffix>
      <xref type="text">Open Mobile Alliance, "Binary XML Content Format
        Specification", OMA Wireless Access Protocol WAP-192-
        WBXML-20010725-a, July 2001.</xref><xref type="rfc" data="rfc6839"/>
      <encoding>WBXML is a binary encoding.</encoding>
      <interop>n/a</interop>
      <fragment>The syntax and semantics of fragment
        identifiers specified for +wbxml SHOULD be as
        specified for "application/vnd.wap.wbxml".
        (At publication of this document, there is no
        fragment identification syntax defined for
        "application/vnd.wap.wbxml".)
        
        The syntax and semantics for fragment
        identifiers for a specific "xxx/yyy+wbxml"
        SHOULD be processed as follows:
        
        For cases defined in +wbxml, where the
        fragment identifier resolves per the +wbxml
        rules, then as specified in +wbxml.
        
        For cases defined in +wbxml, where the
        fragment identifier does not resolve per
        the +wbxml rules, then as specified in
        "xxx/yyy+wbxml".
        
        For cases not defined in +wbxml, then as
        specified in "xxx/yyy+wbxml".
      </fragment>
      <security>There are no security considerations
        inherent in WBXML.  Each individual media type
        registered with a +wbxml suffix can have
        additional security considerations.
      </security>
      <contact>Apps Area Working Group (apps-discuss@ietf.org)</contact>
      <controller>The Apps Area Working Group.  IESG has
        change control over this registration.</controller>
      <mod-dates/>
    </record>
    
    <record date="2012-11-27">
      <name>ZIP file storage and transfer format</name>
      <suffix>+zip</suffix>
      <xref type="text">PKWARE, Inc., "APPNOTE.TXT - .ZIP File Format
        Specification", PKWARE .ZIP File Format Specification -
        Version 6.3.2, September 2007.</xref><xref type="rfc" data="rfc6839"/>
      <encoding>ZIP is a binary encoding.</encoding>
      <interop>n/a</interop>
      <fragment>The syntax and semantics of fragment
        identifiers specified for +zip SHOULD be as
        specified for "application/zip".  (At
        publication of this document, there is no
        fragment identification syntax defined for
        "application/zip".)
        
        The syntax and semantics for fragment
        identifiers for a specific "xxx/yyy+zip"
        SHOULD be processed as follows:
        
        For cases defined in +zip, where the
        fragment identifier resolves per the +zip
        rules, then as specified in +zip.
        
        For cases defined in +zip, where the
        fragment identifier does not resolve per
        the +zip rules, then as specified in "xxx/
        yyy+zip".
        
        For cases not defined in +zip, then as
        specified in "xxx/yyy+zip".
      </fragment>
      <security>ZIP files support two forms of encryption:
        Strong Encryption and AES 128-bit, 192-bit and
        256-bit encryption; see the specification for
        further details.  Each individual media type
        registered with a +zip suffix can have additional
        security considerations.
      </security>
      <contact>Apps Area Working Group (apps-discuss@ietf.org)</contact>
      <controller>The Apps Area Working Group.  IESG has
        change control over this registration.</controller>
      <mod-dates/>
    </record>
    
  </registry>
  
  <people>
    
  </people>
</registry>
